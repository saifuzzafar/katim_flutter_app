// Mocks generated by Mockito 5.4.0 from annotations
// in katim_app/test/usecases/chcek_if_favorite_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:katim_app/domain/repository/events_repository.dart' as _i2;
import 'package:katim_app/domain/usecases/check_if_favourite_usecase.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEventRepository_0 extends _i1.SmartFake
    implements _i2.EventRepository {
  _FakeEventRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CheckIfFavouriteUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckIfFavouriteUseCase extends _i1.Mock
    implements _i3.CheckIfFavouriteUseCase {
  MockCheckIfFavouriteUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EventRepository get eventRepository => (super.noSuchMethod(
        Invocation.getter(#eventRepository),
        returnValue: _FakeEventRepository_0(
          this,
          Invocation.getter(#eventRepository),
        ),
      ) as _i2.EventRepository);
  @override
  bool execute(_i3.CheckIfFavouriteParams? params) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [params],
        ),
        returnValue: false,
      ) as bool);
}
